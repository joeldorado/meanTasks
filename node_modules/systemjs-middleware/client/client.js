(function() {
    "use strict";

    document.addEventListener("DOMContentLoaded", function() {
        const script = document.querySelector('script[src="systemjs/init"]');
        if(script == null) {
            console.error("(SystemJSMiddleware) systemjs/init script was not found");
            return;
        }

        const mainJSLocation = (function() {
            var attr = script.attributes["data-main"];
            if (attr == null) {
                console.log("(SystemJSMiddleware) data-main attribute for systemjs/init script was not found. Using default script: app/main");
                return "app/main";
            }
            else {
                return attr.value;
            }
        })();

        fetch("systemjs/config")
            .then(res => {
                return res.json();
            })
            .then(config => {
                console.log("(SystemJSMiddleware) configuration");
                console.log("    basePath: " + config.basePath);
                console.log("    systemJSLocation: " + config.systemJSLocation);

                const script = document.createElement("script");
                script.src = config.systemJSLocation;
                script.addEventListener("load", function() {
                    patchSystemJS();

                    System.import(mainJSLocation);
                });

                const head = document.querySelector("head");
                if(!head) {
                    console.error("head element was not found");
                    return;
                }

                head.appendChild(script);
            })
            .catch(err => {
                console.error("systemjs-middleware failed to initialize: " + err.message);
            });
    });


    function patchSystemJS() {
        hook(System, "locate", function (next) {
            return function (load) {
                return next.apply(this, arguments).then(function (address) {
                    const parts = parseUrl(address);
                    if (!parts) {
                        return address;
                    }

                    return resolveByServer(parts.path).then(path => {
                        console.log("(SystemJSMiddleware) locate: " + path);

                        parts.path = path;
                        address = buildUrl(parts);

                        return address;
                    });
                });
            }
        });
    }

    function resolveByServer(path) {
        return fetch("systemjs/locate?path=" + path)
            .then(res => res.json())
            .then(json => {
                const resolvedPath = (json.err ? path : json.path);
                return resolvedPath;
            })
            .catch(err => {
                console.error(err);
            });
    }

    function buildUrl(parts) {
        let url = "";

        if(parts.base) {
            url = parts.base;
        }

        url += parts.path;

        if(parts.plugin) {
            url += ("!" + parts.plugin);
        }

        return url;
    }

    function parseUrl(url) {
        var res = {
            base: undefined,
            path: undefined,
        };

        let index = url.indexOf("//");
        if (index == -1) {
            return null;
        }

        index = url.indexOf("/", index + 2);
        if (index == -1) {
            return null;
        }

        let end = url.indexOf("!", index+1);
        if(end == -1) {
            end = undefined;
        }

        res.base = url.substring(0, index + 1);
        res.path = url.substring(index + 1, end);
        res.plugin = (end ? url.substring(end + 1) : undefined);
        return res;
    }

    function hook(obj, methodName, factory) {
        const oldMethod = obj[methodName];

        obj[methodName] = factory(oldMethod);
    }
})();
