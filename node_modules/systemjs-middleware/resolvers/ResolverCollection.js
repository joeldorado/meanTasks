"use strict";
var promise_1 = require("../helpers/promise");
var ResolverCollection = (function () {
    function ResolverCollection(name, resolvers) {
        this.name = name;
        this.resolvers = resolvers;
        this.resolversByName = {};
        for (var _i = 0, _a = this.resolvers; _i < _a.length; _i++) {
            var r = _a[_i];
            this.ensureNoDuplication(r);
            this.resolversByName[r.name] = r;
        }
    }
    ResolverCollection.prototype.resolve = function (location, logger) {
        return promise_1.or(this.resolvers.map(function (r) {
            return function () {
                return r.resolve(location, logger);
            };
        }));
    };
    ResolverCollection.prototype.ensureNoDuplication = function (resolver) {
        if (this.resolversByName.hasOwnProperty(resolver.name)) {
            throw new Error("Resolver with name: " + resolver.name + " already exists");
        }
    };
    ResolverCollection.prototype.add = function (resolver) {
        this.ensureNoDuplication(resolver);
        this.resolvers.push(resolver);
        this.resolversByName[resolver.name] = resolver;
    };
    ResolverCollection.prototype.insertAt = function (index, resolver) {
        this.ensureNoDuplication(resolver);
        this.resolvers.splice(index, 0, resolver);
        this.resolversByName[resolver.name] = resolver;
    };
    ResolverCollection.prototype.clear = function () {
        this.resolvers = [];
        this.resolversByName = {};
    };
    ResolverCollection.prototype.remove = function (name) {
        if (!this.resolversByName.hasOwnProperty(name)) {
            return;
        }
        var index = this.resolvers.findIndex(function (r) { return r.name == name; });
        this.resolvers.splice(index, 1);
        delete this.resolversByName[name];
    };
    return ResolverCollection;
}());
exports.ResolverCollection = ResolverCollection;
