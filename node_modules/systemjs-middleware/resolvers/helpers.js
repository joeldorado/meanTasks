"use strict";
var configurator = require("../core/config");
var fs_1 = require("../helpers/fs");
var promise_1 = require("../helpers/promise");
var path = require("path");
var config = configurator.get();
function resolveFile(location, logger) {
    var filePath = path.join(config.basePath, location);
    return fs_1.fileExists(filePath)
        .then(function (exists) {
        if (exists) {
            logger.log("FOUND " + filePath);
            return location;
        }
        else {
            logger.log(filePath);
            return "";
        }
    })
        .catch(function (err) {
        logger.log("ERROR " + err.message);
        throw err;
    });
}
exports.resolveFile = resolveFile;
function resolveWithExtensions(location, extensions, logger) {
    extensions = extensions || config.defaultExtensions;
    var funcs = [];
    var _loop_1 = function(ext) {
        var locationWithExt = location + (ext ? ("." + ext) : "");
        funcs.push(function () { return resolveFile(locationWithExt, logger); });
    };
    for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
        var ext = extensions_1[_i];
        _loop_1(ext);
    }
    return promise_1.or(funcs);
}
exports.resolveWithExtensions = resolveWithExtensions;
function resolveFiles(locations, logger) {
    var funcs = [];
    var _loop_2 = function(location_1) {
        funcs.push(function () { return resolveWithExtensions(location_1, config.defaultExtensions, logger); });
    };
    for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
        var location_1 = locations_1[_i];
        _loop_2(location_1);
    }
    return promise_1.or(funcs);
}
exports.resolveFiles = resolveFiles;
function isValidNpmPackageName(name) {
    if (name.indexOf("/") != -1) {
        return false;
    }
    return true;
}
exports.isValidNpmPackageName = isValidNpmPackageName;
